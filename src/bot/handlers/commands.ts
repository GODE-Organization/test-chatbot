import type { BotContext } from '../../types/bot.js'
import { logger } from '../../utils/logger.js'
import { 
  getMainMenuKeyboard, 
  getSettingsKeyboard, 
  getHelpKeyboard,
  getContactKeyboard 
} from '../keyboards/main.js'

/**
 * Comando /start - Iniciar el bot
 */
export async function startCommand(ctx: BotContext) {
  try {
    const welcomeMessage = `
üõçÔ∏è ¬°Bienvenido a nuestro asistente de atenci√≥n al cliente!

¬°Hola! Soy tu asistente inteligente y estoy aqu√≠ para ayudarte con:

‚Ä¢ Consultas sobre nuestros productos
‚Ä¢ Registro de garant√≠as
‚Ä¢ Informaci√≥n de horarios y ubicaci√≥n
‚Ä¢ Cualquier pregunta que tengas

Simplemente escribe tu mensaje y te ayudar√© de inmediato.

¬øEn qu√© puedo ayudarte hoy?
    `.trim()

    await ctx.reply(welcomeMessage, getMainMenuKeyboard())
    
    logger.user.action(ctx.from?.id || 0, 'Comando /start ejecutado')
  } catch (error) {
    logger.error('Error en comando start:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}

/**
 * Comando /help - Mostrar ayuda
 */
export async function helpCommand(ctx: BotContext) {
  try {
    const helpMessage = `
üìñ **Comandos disponibles:**

**Comandos principales:**
/start - Iniciar el bot
/help - Mostrar esta ayuda
/settings - Configuraci√≥n
/stats - Ver estad√≠sticas
/contact - Informaci√≥n de contacto
/reset - Reiniciar sesi√≥n
/cancel - Cancelar operaci√≥n actual

**Funcionalidades:**
‚Ä¢ Asistente inteligente con IA
‚Ä¢ Consulta de cat√°logo de productos
‚Ä¢ Registro de garant√≠as
‚Ä¢ Consulta de horarios
‚Ä¢ Informaci√≥n de ubicaci√≥n
‚Ä¢ Encuestas de satisfacci√≥n

Simplemente escribe tu mensaje y nuestro asistente inteligente te ayudar√°.
    `.trim()

    await ctx.reply(helpMessage, getHelpKeyboard())
    
    logger.user.action(ctx.from?.id || 0, 'Comando /help ejecutado')
  } catch (error) {
    logger.error('Error en comando help:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}

/**
 * Comando /settings - Configuraci√≥n
 */
export async function settingsCommand(ctx: BotContext) {
  try {
    const settingsMessage = `
‚öôÔ∏è **Configuraci√≥n**

Selecciona una opci√≥n para personalizar tu experiencia:
    `.trim()

    await ctx.reply(settingsMessage, getSettingsKeyboard())
    
    logger.user.action(ctx.from?.id || 0, 'Comando /settings ejecutado')
  } catch (error) {
    logger.error('Error en comando settings:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}

/**
 * Comando /stats - Estad√≠sticas
 */
export async function statsCommand(ctx: BotContext) {
  try {
    const statsMessage = `
üìä **Estad√≠sticas del Bot**

‚Ä¢ Usuarios activos: Calculando...
‚Ä¢ Mensajes procesados: Calculando...
‚Ä¢ Tiempo de actividad: 24/7
‚Ä¢ Versi√≥n: 1.0.0

*Las estad√≠sticas se actualizan en tiempo real*
    `.trim()

    await ctx.reply(statsMessage)
    
    logger.user.action(ctx.from?.id || 0, 'Comando /stats ejecutado')
  } catch (error) {
    logger.error('Error en comando stats:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}

/**
 * Comando /contact - Informaci√≥n de contacto
 */
export async function contactCommand(ctx: BotContext) {
  try {
    const contactMessage = `
üìû **Informaci√≥n de Contacto**

¬øNecesitas ayuda o tienes alguna sugerencia?

Puedes contactarnos a trav√©s de:
    `.trim()

    await ctx.reply(contactMessage, getContactKeyboard())
    
    logger.user.action(ctx.from?.id || 0, 'Comando /contact ejecutado')
  } catch (error) {
    logger.error('Error en comando contact:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}

/**
 * Comando /reset - Reiniciar sesi√≥n
 */
export async function resetCommand(ctx: BotContext) {
  try {
    if (ctx.session) {
      const { AIProcessor } = await import('../ai-integration/ai-processor.js')
      const aiProcessor = AIProcessor.getInstance()
      ctx.session = aiProcessor.resetSessionToIdle(ctx.session)
    }

    const resetMessage = `
üîÑ **Sesi√≥n Reiniciada**

Tu sesi√≥n ha sido reiniciada. Puedes comenzar de nuevo.

Usa /start para ver el men√∫ principal.
    `.trim()

    await ctx.reply(resetMessage)
    
    logger.user.action(ctx.from?.id || 0, 'Comando /reset ejecutado')
  } catch (error) {
    logger.error('Error en comando reset:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}

/**
 * Comando /cancel - Cancelar operaci√≥n actual
 */
export async function cancelCommand(ctx: BotContext) {
  try {
    const { AIMessageHandler } = await import('./ai-message-handler.js')
    const aiHandler = AIMessageHandler.getInstance()
    
    await aiHandler.handleCancelCommand(ctx)
    
    logger.user.action(ctx.from?.id || 0, 'Comando /cancel ejecutado')
  } catch (error) {
    logger.error('Error en comando cancel:', error)
    await ctx.reply('‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.')
  }
}