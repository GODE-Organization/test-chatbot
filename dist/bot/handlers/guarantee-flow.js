import { logger } from '../../utils/logger.js';
import { guaranteeModel } from '../../database/models.js';
import { AIProcessor } from '../ai-integration/ai-processor.js';
export class GuaranteeFlowHandler {
    static instance;
    aiProcessor;
    constructor() {
        this.aiProcessor = AIProcessor.getInstance();
    }
    static getInstance() {
        if (!GuaranteeFlowHandler.instance) {
            GuaranteeFlowHandler.instance = new GuaranteeFlowHandler();
        }
        return GuaranteeFlowHandler.instance;
    }
    async startGuaranteeFlow(ctx) {
        try {
            if (!ctx.user || !ctx.session) {
                await ctx.reply('‚ùå Error: No se pudo iniciar el flujo de garant√≠a.');
                return;
            }
            ctx.session = this.aiProcessor.updateSessionForGuaranteeFlow(ctx.session);
            const message = `
üîß <b>Registro de Garant√≠a</b>

Por favor, env√≠a el <b>n√∫mero de factura</b> para comenzar.

Puedes cancelar en cualquier momento escribiendo <b>/cancel</b>
      `.trim();
            await ctx.replyWithHTML(message);
            logger.user.action(ctx.user.id, 'Flujo de garant√≠a iniciado');
            logger.debug('Sesi√≥n actualizada para flujo de garant√≠a:', {
                userId: ctx.user.id,
                sessionState: ctx.session.state,
                flowStep: ctx.session.flow_data?.guarantee_flow?.step
            });
        }
        catch (error) {
            logger.error('Error iniciando flujo de garant√≠a:', error);
            await ctx.reply('‚ùå Ocurri√≥ un error iniciando el flujo de garant√≠a.');
        }
    }
    async processGuaranteeStep(ctx, messageType) {
        try {
            if (!ctx.user || !ctx.session || !ctx.session.flow_data?.guarantee_flow) {
                return false;
            }
            const flow = ctx.session.flow_data.guarantee_flow;
            const currentStep = flow.step;
            switch (currentStep) {
                case 'waiting_invoice_number':
                    return await this.handleInvoiceNumber(ctx, messageType);
                case 'waiting_invoice_photo':
                    return await this.handleInvoicePhoto(ctx, messageType);
                case 'waiting_product_photo':
                    return await this.handleProductPhoto(ctx, messageType);
                case 'waiting_description':
                    return await this.handleDescription(ctx, messageType);
                default:
                    return false;
            }
        }
        catch (error) {
            logger.error('Error procesando paso de garant√≠a:', error);
            await ctx.reply('‚ùå Ocurri√≥ un error procesando tu solicitud.');
            return false;
        }
    }
    async handleInvoiceNumber(ctx, messageType) {
        if (messageType !== 'text' || !ctx.message || !('text' in ctx.message)) {
            await ctx.reply('‚ùå Por favor, env√≠a el **n√∫mero de factura** como texto.');
            return false;
        }
        const invoiceNumber = ctx.message.text.trim();
        if (invoiceNumber.length < 3) {
            await ctx.reply('‚ùå El n√∫mero de factura debe tener al menos 3 caracteres. Intenta de nuevo.');
            return false;
        }
        if (ctx.session?.flow_data?.guarantee_flow) {
            ctx.session.flow_data.guarantee_flow.data.invoice_number = invoiceNumber;
            ctx.session.flow_data.guarantee_flow.step = 'waiting_invoice_photo';
        }
        await ctx.reply(`
‚úÖ N√∫mero de factura registrado: ${invoiceNumber}

Ahora env√≠a una foto de la factura para continuar.
    `.trim());
        return true;
    }
    async handleInvoicePhoto(ctx, messageType) {
        if (messageType !== 'photo' || !ctx.message || !('photo' in ctx.message)) {
            await ctx.reply('‚ùå Por favor, env√≠a una foto de la factura.');
            return false;
        }
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        if (!photo) {
            await ctx.reply('‚ùå Error procesando la foto. Intenta de nuevo.');
            return false;
        }
        const fileId = photo.file_id;
        if (ctx.session?.flow_data?.guarantee_flow) {
            ctx.session.flow_data.guarantee_flow.data.invoice_photo_file_id = fileId;
            ctx.session.flow_data.guarantee_flow.step = 'waiting_product_photo';
        }
        await ctx.reply(`
‚úÖ Foto de factura recibida

Ahora env√≠a una foto del producto para continuar.
    `.trim());
        return true;
    }
    async handleProductPhoto(ctx, messageType) {
        if (messageType !== 'photo' || !ctx.message || !('photo' in ctx.message)) {
            await ctx.reply('‚ùå Por favor, env√≠a una foto del producto.');
            return false;
        }
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        if (!photo) {
            await ctx.reply('‚ùå Error procesando la foto. Intenta de nuevo.');
            return false;
        }
        const fileId = photo.file_id;
        if (ctx.session?.flow_data?.guarantee_flow) {
            ctx.session.flow_data.guarantee_flow.data.product_photo_file_id = fileId;
            ctx.session.flow_data.guarantee_flow.step = 'waiting_description';
        }
        await ctx.reply(`
‚úÖ Foto del producto recibida

Finalmente, describe el problema o motivo de la garant√≠a.
    `.trim());
        return true;
    }
    async handleDescription(ctx, messageType) {
        if (messageType !== 'text' || !ctx.message || !('text' in ctx.message)) {
            await ctx.reply('‚ùå Por favor, env√≠a la descripci√≥n del problema como texto.');
            return false;
        }
        const description = ctx.message.text.trim();
        if (description.length < 10) {
            await ctx.reply('‚ùå La descripci√≥n debe tener al menos 10 caracteres. Intenta de nuevo.');
            return false;
        }
        return await this.completeGuaranteeRegistration(ctx, description);
    }
    async completeGuaranteeRegistration(ctx, description) {
        try {
            if (!ctx.user || !ctx.session?.flow_data?.guarantee_flow) {
                return false;
            }
            const flowData = ctx.session.flow_data.guarantee_flow.data;
            if (!flowData.invoice_number || !flowData.invoice_photo_file_id || !flowData.product_photo_file_id) {
                await ctx.reply('‚ùå Error: Faltan datos del flujo de garant√≠a.');
                return false;
            }
            const result = await guaranteeModel.createGuarantee({
                user_id: ctx.user.id,
                invoice_number: flowData.invoice_number,
                invoice_photo_file_id: flowData.invoice_photo_file_id,
                product_photo_file_id: flowData.product_photo_file_id,
                description: description
            });
            if (!result.success) {
                await ctx.reply('‚ùå Error registrando la garant√≠a. Intenta de nuevo.');
                return false;
            }
            ctx.session = this.aiProcessor.resetSessionToIdle(ctx.session);
            await ctx.reply(`
‚úÖ Garant√≠a registrada exitosamente

N√∫mero de garant√≠a: #${result.data?.id}
N√∫mero de factura: ${flowData.invoice_number}
Estado: Pendiente de revisi√≥n

Tu solicitud de garant√≠a ha sido registrada y ser√° revisada por nuestro equipo. Te contactaremos pronto.

¬øHay algo m√°s en lo que pueda ayudarte?
      `.trim());
            logger.user.action(ctx.user.id, `Garant√≠a registrada: #${result.data?.id}`);
            return true;
        }
        catch (error) {
            logger.error('Error completando registro de garant√≠a:', error);
            await ctx.reply('‚ùå Ocurri√≥ un error registrando la garant√≠a.');
            return false;
        }
    }
    async cancelGuaranteeFlow(ctx) {
        try {
            if (!ctx.session) {
                return;
            }
            ctx.session = this.aiProcessor.resetSessionToIdle(ctx.session);
            await ctx.reply(`
‚ùå Flujo de garant√≠a cancelado

¬øEn qu√© m√°s puedo ayudarte?
      `.trim());
            if (ctx.user) {
                logger.user.action(ctx.user.id, 'Flujo de garant√≠a cancelado');
            }
        }
        catch (error) {
            logger.error('Error cancelando flujo de garant√≠a:', error);
        }
    }
    isInGuaranteeFlow(session) {
        const isInFlow = session?.state === 'guarantee_flow' &&
            session?.flow_data?.guarantee_flow?.step !== 'completed';
        logger.debug('Verificando flujo de garant√≠a:', {
            sessionState: session?.state,
            flowStep: session?.flow_data?.guarantee_flow?.step,
            isInFlow
        });
        return isInFlow;
    }
}
//# sourceMappingURL=guarantee-flow.js.map